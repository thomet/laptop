#!/usr/bin/env bash
### end common-components/bash-shebang

# Welcome to the thoughtbot laptop script! Be prepared to turn your laptop (or
# desktop, no haters here) into an awesome development machine.

# This file is auto-generated. Do not edit it by hand unless you know what
# you're doing. Please see 'CONTRIBUTING.md' for more information.
### end common-components/header

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}
### end common-components/shared-functions

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end common-components/exit-trap

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch $HOME/.zshrc
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'
### end common-components/check-home-bin

# Might as well ask for password up-front, right?
sudo -v

# Keep-alive: update existing sudo time stamp if set, otherwise do nothing.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
### end common-components/get-sudo

fancy_echo "Install command line tools ..."
  touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress;
  PROD=$(softwareupdate -l |
    grep "\*.*Command Line" |
    tail -n 1 | awk -F": " '{print $2}' |
    sed -e 's/^ *//' |
    tr -d '\n')
  echo "Install $PROD"
  softwareupdate -i "$PROD" --verbose;
### end mac-components/command-line-tools

case "$SHELL" in
  */zsh) : ;;
  *)
    fancy_echo "Changing your shell to zsh ..."
      chsh -s "$(which zsh)"
    ;;
esac
### end common-components/zsh

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      fancy_echo "Upgrading %s ..." "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping ..." "$1"
    fi
  else
    fancy_echo "Installing %s ..." "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  local name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name="$(brew_expand_alias "$1")"

  ! brew outdated --quiet "$name" >/dev/null
}

brew_tap() {
  brew tap "$1" 2> /dev/null
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  fancy_echo "Restarting %s ..." "$1"
  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -Fq "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
    rbenv rehash
  fi
}
### end mac-components/mac-functions

fancy_echo "Installing oh-my-zsh ..."
  if [ -d ~/.oh-my-zsh ]
  then
    echo "\033[0;33mYou already have One oh-my-zsh Directory.\033[0m You'll need to remove  ~/.oh-my-zsh if you want to clone"
  else
    curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
  fi
### end common-components/oh-my-zsh

if [[ -f /etc/zshenv ]]; then
  fancy_echo "Fixing OSX zsh environment bug ..."
    sudo mv /etc/{zshenv,zshrc}
fi
### end mac-components/zsh-fix

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
  brew update
### end mac-components/homebrew

fancy_echo "Cleanup dock ..."
  defaults write com.apple.dock show-recents -bool no
  defaults write com.apple.dock recent-apps -array

### end mac-components/cleanup-dock

brew_install_or_upgrade 'zsh'
brew_install_or_upgrade 'git'
brew_install_or_upgrade 'the_silver_searcher'
brew_install_or_upgrade 'vim'
brew_install_or_upgrade 'ctags'
brew_install_or_upgrade 'dockutil'
brew_install_or_upgrade 'docker'
brew_install_or_upgrade 'docker-machine'
brew_install_or_upgrade 'docker-machine-nfs'
brew_install_or_upgrade 'docker-compose'
brew_install_or_upgrade 'git-extras'
brew_install_or_upgrade 'htop-osx'
brew_install_or_upgrade 'wget'
brew_install_or_upgrade 'source-highlight'
brew_install_or_upgrade 'dnsmasq'
brew_install_or_upgrade 'asdf'
brew_install_or_upgrade 'awscli'
brew_install_or_upgrade 'gpg'
brew_install_or_upgrade 'tmate'
brew_install_or_upgrade 'docker-credential-helper-ecr'
brew_install_or_upgrade 'caffeine'
brew_install_or_upgrade 'spectacle'
brew_install_or_upgrade 'sequel-pro'
brew_install_or_upgrade 'silverlight'
brew_install_or_upgrade 'virtualbox'
brew_install_or_upgrade 'gpg'
brew_install_or_upgrade 'pinentry-mac'

dockutil --remove all

brew_install_or_upgrade 'brave-browser'
dockutil --add /Applications/Brave\ Browser.app --no-restart
brew_install_or_upgrade 'firefox'
dockutil --add /Applications/Firefox.app --no-restart
brew_install_or_upgrade 'slack'
dockutil --add /Applications/Slack.app --no-restart
brew_install_or_upgrade 'rubymine'
dockutil --add /Applications/RubyMine.app --no-restart
brew_install_or_upgrade 'atom'
dockutil --add /Applications/Atom.app --no-restart
brew_install_or_upgrade 'iterm2'
dockutil --add /Applications/iTerm.app
### end mac-components/packages

if ! command -v rcup &>/dev/null; then
  brew_tap 'thoughtbot/formulae'
  brew_install_or_upgrade 'rcm'
fi
### end mac-components/rcm

fancy_echo "Setup Docker Machine ..."
  if docker-machine inspect default >/dev/null;
  then
    echo "\033[0;33mYou already have a default docker machine.\033[0m You'll need to remove it before I can setup a new one"
  else
    docker-machine create --driver virtualbox --virtualbox-cpu-count "4" --virtualbox-disk-size "100000" --virtualbox-memory "16384" default
    docker-machine-nfs default
    brew services start docker-machine
    docker-machine ssh default sudo sysctl -w vm.max_map_count=262144
    docker-machine ssh default "echo 'sysctl -w vm.max_map_count=262144' | sudo tee -a /var/lib/boot2docker/profile > /dev/null"
  fi
### end mac-components/setup-docker

fancy_echo "Setup dnsmasq ..."
  if [ -f /etc/resolver/dev.sageone.com ]
  then
    echo "\033[0;33mYou already have a dnsmasq setup.\033[0m You'll need to remove it before I can setup it again"
  else
    mkdir -pv $(brew --prefix)/etc/
    echo "address=/dev.sageone.com/`docker-machine ip`" > $(brew --prefix)/etc/dnsmasq.conf

    sudo brew services start dnsmasq

    sudo mkdir -v /etc/resolver
    sudo bash -c 'echo "nameserver 127.0.0.1" > /etc/resolver/dev.sageone.com'

    sudo killall -HUP mDNSResponder
  fi
### end mac-components/setup-dnsmasq

if [[ -f ~/.laptop.local ]]; then
  source ~/.laptop.local
fi
### end common-components/personal-additions

